package PFiches;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import projetvtc.Conducteur;
import projetvtc.ExErreur;
import projetvtc.ExMailFaux;
import projetvtc.ExMdpFaux;
import projetvtc.Passager;
import projetvtc.Site;
import projetvtc.Utilisateur;

public class FConnexion extends javax.swing.JDialog {

    private int choix; //Variable qui va déterminer si on se connecte en tant que conducteur ou passager

    public FConnexion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        lMail.setVisible(false); //On rend invisible tous les champs tant que l'utilisateur n'a pas choisi s'il veut se connecter en passager ou en conducteur
        lMdp.setVisible(false);
        tfMail.setVisible(false);
        tfMdp.setVisible(false);
        bConnexion.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgChoix = new javax.swing.ButtonGroup();
        tfMail = new javax.swing.JTextField();
        lMail = new javax.swing.JLabel();
        lMdp = new javax.swing.JLabel();
        bConnexion = new javax.swing.JButton();
        bRetour = new javax.swing.JButton();
        rbConducteur = new javax.swing.JRadioButton();
        rbPassager = new javax.swing.JRadioButton();
        lChoix = new javax.swing.JLabel();
        tfMdp = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tfMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMailActionPerformed(evt);
            }
        });

        lMail.setText("Votre adresse mail :");

        lMdp.setText("Votre mot de passe :");

        bConnexion.setText("Se Connecter");
        bConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConnexionActionPerformed(evt);
            }
        });

        bRetour.setText("Retour");
        bRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRetourActionPerformed(evt);
            }
        });

        bgChoix.add(rbConducteur);
        rbConducteur.setText("Conducteur");
        rbConducteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbConducteurActionPerformed(evt);
            }
        });

        bgChoix.add(rbPassager);
        rbPassager.setText("Passager");
        rbPassager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPassagerActionPerformed(evt);
            }
        });

        lChoix.setText("Vous êtes un :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lMdp)
                    .addComponent(lMail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfMail)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(163, 163, 163)
                                .addComponent(bRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tfMdp))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(rbConducteur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbPassager)
                .addGap(71, 71, 71))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lChoix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbPassager)
                    .addComponent(rbConducteur))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfMail, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lMail))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMdp)
                    .addComponent(tfMdp, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(bConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(bRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMailActionPerformed

    private void bConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConnexionActionPerformed
        try {
            Conducteur C; //Pour stocker des objets de type conducteur provisoirement
            Passager P; //Pour stocker des objets de type passager provisoirement
            String mail = tfMail.getText(); //On récupère le mail entré
            String mdp = String.valueOf(tfMdp.getPassword()); //On récupère le mot de passe entré
            if (choix == 1) //si c'est un Passager
            {
                P = ((Accueil) getParent()).getSite().identificationPass(mail, mdp); //On appelle la fonction du site qui permet l'identification du passager et qui renvoit les infos sur ce passager
                this.setVisible(false); //On rend invisible cette page
                FPassagerEspace ficheP = ((Accueil) getParent()).getFicheP(); //On récupère la page de l'espace du passager
                ficheP.initPass(P); //On envoie les infos du passager à cette page
                (((Accueil) getParent()).getFicheProfilPass()).initPass(P); //On envoie les infos du passager à la page de son profil
                (((Accueil) getParent()).getFicheCommande()).initPass(P); //On envoie les infos du passager à la page des commandes
                (((Accueil) getParent()).getFicheEspaceCommande()).initPass(P); //On envoie les infos du passager à la page des anciennes commandes
                ficheP.setVisible(true); //On rend visible la page de l'espace du passager
                tfMdp.setText(""); //On efface le mot de passe
                tfMail.setText(""); //On efface le mail
            } else if (choix == 2) //si c'est un Conducteur
            {
                C = ((Accueil) getParent()).getSite().identificationCond(mail, mdp); //On appelle la fonction du site qui permet l'identification du conducteur et qui renvoit les infos sur ce conducteur
                this.setVisible(false); //On rend invisible cette page
                FConducteurEspace ficheEspace = ((Accueil) getParent()).getFicheCond(); //On récupère la page de l'espace du conducteur
                ficheEspace.initCond(C); //On envoie les infos du conducteur à cette page
                ficheEspace.setVisible(true); //On rend cette page visible
                (((Accueil) getParent()).getFicheProfilCond()).initCond(C); //On envoie les infos du passager à la page du profil du conducteur
                (((Accueil) getParent()).getFicheAvisCond()).initCond(C); //On envoie les infos du passager à la page des avis
                tfMdp.setText(""); //On efface le mot de passe
                tfMail.setText(""); //On efface le mail
            }
        } catch (ExMdpFaux ex) { //Si le mot de passe est faux
            JOptionPane.showMessageDialog(this, "Mot de passe erroné.\nVeuillez réessayer.");
            tfMdp.setText(""); //On efface le mot de passe
        } catch (ExMailFaux ex) { //Si le mail est faux
            JOptionPane.showMessageDialog(this, "Adresse E-Mail erronée.\nVeuillez réessayer.");
            tfMdp.setText(""); //On efface le mot de passe
        }
    }//GEN-LAST:event_bConnexionActionPerformed

    private void bRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRetourActionPerformed
        this.setVisible(false); //On rend invisible cette page puis on rend visible la page précédente
        this.getParent().setVisible(true);
    }//GEN-LAST:event_bRetourActionPerformed

    private void rbConducteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbConducteurActionPerformed
        choix = 2; //Si choix=2 alors la connexion sera pour un conducteur
        lMail.setVisible(true); //On rend visible les composants pour se connecter
        lMdp.setVisible(true);
        tfMail.setVisible(true);
        tfMdp.setVisible(true);
        bConnexion.setVisible(true);
    }//GEN-LAST:event_rbConducteurActionPerformed

    private void rbPassagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPassagerActionPerformed
        choix = 1; //Si choix=2 alors la connexion sera pour un passager
        lMail.setVisible(true); //On rend visible les composants pour se connecter
        lMdp.setVisible(true);
        tfMail.setVisible(true);
        tfMdp.setVisible(true);
        bConnexion.setVisible(true);
    }//GEN-LAST:event_rbPassagerActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            (((Accueil) getParent()).getSite()).sauvegarde(); //On sauvegarde en gérant les possibles erreurs
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur inconnue de sauvegarde.");
        } finally {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FConnexion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FConnexion dialog = new FConnexion(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bConnexion;
    private javax.swing.JButton bRetour;
    private javax.swing.ButtonGroup bgChoix;
    private javax.swing.JLabel lChoix;
    private javax.swing.JLabel lMail;
    private javax.swing.JLabel lMdp;
    private javax.swing.JRadioButton rbConducteur;
    private javax.swing.JRadioButton rbPassager;
    private javax.swing.JTextField tfMail;
    private javax.swing.JPasswordField tfMdp;
    // End of variables declaration//GEN-END:variables
}
