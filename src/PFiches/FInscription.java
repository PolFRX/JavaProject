package PFiches;

import java.io.IOException; //pour gérer les erreurs de fichier
import javax.swing.JOptionPane; //pour afficher des messages
import projetvtc.ExErreur; //Pour gérer différents types d'erreurs
import projetvtc.ExMdpFaux;
import projetvtc.ExVide;
import projetvtc.Passager; //Pour gérer des passagers

public class FInscription extends javax.swing.JDialog {

    public FInscription(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        lCB.setVisible(false); //On rend invisible les composants spécifiques à un certain type d'utilisateur
        cbCB.setVisible(false);
        lPermis.setVisible(false);
        rbPermisB.setVisible(false);
        rbMoto.setVisible(false);
        lCarteGrise.setVisible(false);
        tfCarteGrise.setVisible(false);
        lAssurance.setVisible(false);
        cbAssurance.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgType = new javax.swing.ButtonGroup();
        bgPermis = new javax.swing.ButtonGroup();
        lSituation = new javax.swing.JLabel();
        rbPassager = new javax.swing.JRadioButton();
        rbConducteur = new javax.swing.JRadioButton();
        tfNom = new javax.swing.JTextField();
        tfMail = new javax.swing.JTextField();
        pfMdp1 = new javax.swing.JPasswordField();
        pfMdp2 = new javax.swing.JPasswordField();
        bAnnuler = new javax.swing.JButton();
        lNom = new javax.swing.JLabel();
        lMail = new javax.swing.JLabel();
        lMdp1 = new javax.swing.JLabel();
        lMdp2 = new javax.swing.JLabel();
        lTel = new javax.swing.JLabel();
        bSuivant = new javax.swing.JButton();
        tfTel = new javax.swing.JFormattedTextField();
        lCB = new javax.swing.JLabel();
        cbCB = new javax.swing.JCheckBox();
        lPermis = new javax.swing.JLabel();
        lCarteGrise = new javax.swing.JLabel();
        lAssurance = new javax.swing.JLabel();
        rbPermisB = new javax.swing.JRadioButton();
        rbMoto = new javax.swing.JRadioButton();
        tfCarteGrise = new javax.swing.JFormattedTextField();
        cbAssurance = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lSituation.setText("Vous êtes un:");

        bgType.add(rbPassager);
        rbPassager.setText("Passager");
        rbPassager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPassagerActionPerformed(evt);
            }
        });

        bgType.add(rbConducteur);
        rbConducteur.setText("Conducteur");
        rbConducteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbConducteurActionPerformed(evt);
            }
        });

        bAnnuler.setText("Annuler");
        bAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnnulerActionPerformed(evt);
            }
        });

        lNom.setText("Nom:");

        lMail.setText("Adresse mail:");

        lMdp1.setText("Mot de passe");

        lMdp2.setText("Confirmez votre mot de passe:");

        lTel.setText("Numéro de téléphone:");

        bSuivant.setText("Suivant");
        bSuivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSuivantActionPerformed(evt);
            }
        });

        lCB.setText("Payez-vous en carte bleu?");

        cbCB.setText("oui");

        lPermis.setText("Permis:");

        lCarteGrise.setText("Numéro de carte grise:");

        lAssurance.setText("Avez-vous une attestation d'assurance?");

        bgPermis.add(rbPermisB);
        rbPermisB.setText("Voiture");

        bgPermis.add(rbMoto);
        rbMoto.setText("Moto");

        cbAssurance.setText("oui");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lTel)
                            .addComponent(lMdp2)
                            .addComponent(lMdp1)
                            .addComponent(lMail)
                            .addComponent(lNom)
                            .addComponent(lCB)
                            .addComponent(lPermis)
                            .addComponent(lCarteGrise)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lAssurance)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfNom)
                            .addComponent(tfMail)
                            .addComponent(pfMdp1)
                            .addComponent(pfMdp2)
                            .addComponent(tfTel, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(cbCB)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbPermisB)
                                .addGap(18, 18, 18)
                                .addComponent(rbMoto))
                            .addComponent(tfCarteGrise, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbAssurance))))
                .addContainerGap(98, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bAnnuler)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bSuivant)
                        .addGap(169, 169, 169))))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(lSituation)
                .addGap(34, 34, 34)
                .addComponent(rbPassager)
                .addGap(47, 47, 47)
                .addComponent(rbConducteur)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSituation)
                    .addComponent(rbPassager)
                    .addComponent(rbConducteur))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lNom))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lMail))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pfMdp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lMdp1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pfMdp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lMdp2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTel)
                    .addComponent(tfTel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCB)
                    .addComponent(cbCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPermis)
                    .addComponent(rbPermisB)
                    .addComponent(rbMoto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCarteGrise)
                    .addComponent(tfCarteGrise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAssurance)
                    .addComponent(lAssurance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bSuivant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(bAnnuler)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            (((Accueil) getParent()).getSite()).sauvegarde(); //On sauvegarde toutes les infos en gérant les possibles erreurs
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur inconnue de sauvegarde.");
        } finally {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    private void bAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnnulerActionPerformed
        tfNom.setText(""); //on enlève toutes les informations déjà rentrées
        tfMail.setText("");
        pfMdp1.setText("");
        pfMdp2.setText("");
        tfTel.setText("");
        cbCB.setSelected(false);
        cbAssurance.setSelected(false);
        rbPermisB.setSelected(false);
        rbMoto.setSelected(false);
        tfCarteGrise.setText("");
        this.setVisible(false); //On rend invisible cette page puis on affiche la page précédente
        (this.getParent()).setVisible(true);
    }//GEN-LAST:event_bAnnulerActionPerformed

    private void bSuivantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSuivantActionPerformed
        try {
            boolean verif = !(rbPassager.isSelected() || rbConducteur.isSelected()); //On regarde si un type de passager a bien été choisi
            boolean assurance; //Variables qui vont contenir les différentes infos de l'utilisateur
            boolean cb;
            String permis;
            int cartegrise;
            String mdp1, mdp2;
            String nom, mail, tel;
            mdp1 = String.valueOf(pfMdp1.getPassword()); //on récupère les mots de passes entrés et on les convertit en texte
            mdp2 = String.valueOf(pfMdp2.getPassword());
            nom = tfNom.getText(); //on récupère les informations entrées
            mail = tfMail.getText();
            tel = tfTel.getText();
            Integer.valueOf(tel); //Pour vérifier si le tel est composé de chiffres sinon ca propage une erreur
            if (!mdp1.equals(mdp2)) { //si les deux mot de passes entrés sont différents
                throw new ExMdpFaux(); //On appelle le catch gérant le mot de passe faux
            }
            if (nom.equals("") || mdp1.equals("") || mail.equals("") || tel.equals("") || verif) { //Si un ou plusieurs champs sont vides
                throw new ExVide(); //On appelle le catch gérant les champs vides
            }
            if (rbPassager.isSelected()) //Inscription passager
            {
                cb = cbCB.isSelected(); //On regarde si le passager veut payer en carte bleue
                Passager P; //Pour stocker lesinfos du passager
                P = (((Accueil) this.getParent()).getSite()).inscrirePassager(cb, nom, mail, mdp1, tel); //On inscrit le passager et on récupère ses infos
                JOptionPane.showMessageDialog(this, "Votre profil de passager a bien été créé.\nBienvenue " + nom + "."); //Message de confirmation
                (((Accueil) this.getParent()).getFicheP()).setVisible(true); //On rend visible la page de l'espace du passager
                this.setVisible(false); //On rend invisible cette page
                (((Accueil) getParent()).getFicheP()).initPass(P); //On envoie les informations du passager à la page de l'espace passager
                (((Accueil) getParent()).getFicheCommande()).initPass(P); //On envoie les informations du passager à la page des commandes
                (((Accueil) getParent()).getFicheEspaceCommande()).initPass(P); //On envoie les informations du passager à la page des anciennes commandes
                (((Accueil)getParent()).getFicheProfilPass()).initPass(P);
                tfNom.setText(""); //On efface les informations entrées par le passager pour s'inscrire
                tfMail.setText("");
                tfTel.setText("");
                cbCB.setSelected(false);
                cbAssurance.setSelected(false);
                rbPermisB.setSelected(false);
                rbMoto.setSelected(false);
                tfCarteGrise.setText("");
            } else if (rbConducteur.isSelected()) //Inscription Conducteur
            {
                verif = (rbPermisB.isSelected() || rbMoto.isSelected()); //On regarde si le conducteur a bien choisi un type de permis
                if (!cbAssurance.isSelected() || !verif) { //Si aucun permis n'est sélectionné ou si le conducteur n'a pas d'assurance
                    JOptionPane.showMessageDialog(this, "Vous ne pouvez pas vous inscrire si vous n'avez pas d'attestation d'assurance ou de permis.");
                } else { //Si tout est en ordre
                    assurance = true;
                    cartegrise = Integer.valueOf(tfCarteGrise.getText()); //On récupère le numéro de carte grise et on le convertit en int
                    if (rbPermisB.isSelected()) { //Si c'est le permis voiture qui est sélectionné
                        permis = "B";
                    } else { //Si c'est le permis moto qui est sélectionné
                        permis = "moto";
                    }
                    JOptionPane.showMessageDialog(this, "Veuillez maintenant entrer les informations de votre véhicule.");
                    (((Accueil) this.getParent()).getFicheVehic()).inscription(nom, mail, tel, permis, assurance, cartegrise, mdp1); //on envoit les informations à la page où il enregistrera son véhicule
                    (((Accueil) this.getParent()).getFicheVehic()).setVisible(true); //On affiche la page pour inscrire son véhicule
                    this.setVisible(false); //On rend invisible cette page
                    tfNom.setText(""); //On efface les données inscrites par le conducteur
                    tfMail.setText("");
                    tfTel.setText("");
                    cbCB.setSelected(false);
                    cbAssurance.setSelected(false);
                    rbPermisB.setSelected(false);
                    rbMoto.setSelected(false);
                    tfCarteGrise.setText("");
                }
            }

        } catch (ExMdpFaux ex) { //Si les deux mot de passes entrés ne sont pas identiques
            JOptionPane.showMessageDialog(this, "Vos mots mot de passe ne sont pas identiques.");
        } catch (NumberFormatException ex) { //Si l'utilisateur n'a pas inscrit des nombres aux endroits où il le faut
            JOptionPane.showMessageDialog(this, "Veuillez entrer seulement des chiffres pour le téléphone et la carte grise.");
        } catch (ExErreur ex) { //S'il y a un problème avec l'enregistrement du passager
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ExVide ex) { //Si un ou plusieurs champs ne sont pas remplis
            JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs et/ou selectionner votre type d'utilisateur.");
        } catch (Exception ex) { //S'il y a une erreur non prévue
            JOptionPane.showMessageDialog(this, "Erreur incconue!");
        } finally {
            pfMdp1.setText(""); //on efface les mots de passe entrés même s'il y a une erreur pour plus de sécurité
            pfMdp2.setText("");
        }
    }//GEN-LAST:event_bSuivantActionPerformed

    private void rbPassagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPassagerActionPerformed
        //Quand l'utilisateur selectionne l'inscription passager
        lCB.setVisible(true); //On affiche seulement les composants spécifiques à l'inscription du passager
        cbCB.setVisible(true);
        lPermis.setVisible(false);
        rbPermisB.setVisible(false);
        rbMoto.setVisible(false);
        lCarteGrise.setVisible(false);
        tfCarteGrise.setVisible(false);
        lAssurance.setVisible(false);
        cbAssurance.setVisible(false);
    }//GEN-LAST:event_rbPassagerActionPerformed

    private void rbConducteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbConducteurActionPerformed
        //Quand l'utilisateur selectionne l'inscription conducteur
        lCB.setVisible(false); //On affiche seulement les composants spécifiques à l'inscription du conducteur
        cbCB.setVisible(false);
        lPermis.setVisible(true);
        rbPermisB.setVisible(true);
        rbMoto.setVisible(true);
        lCarteGrise.setVisible(true);
        tfCarteGrise.setVisible(true);
        lAssurance.setVisible(true);
        cbAssurance.setVisible(true);
    }//GEN-LAST:event_rbConducteurActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FInscription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FInscription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FInscription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FInscription.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FInscription dialog = new FInscription(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAnnuler;
    private javax.swing.JButton bSuivant;
    private javax.swing.ButtonGroup bgPermis;
    private javax.swing.ButtonGroup bgType;
    private javax.swing.JCheckBox cbAssurance;
    private javax.swing.JCheckBox cbCB;
    private javax.swing.JLabel lAssurance;
    private javax.swing.JLabel lCB;
    private javax.swing.JLabel lCarteGrise;
    private javax.swing.JLabel lMail;
    private javax.swing.JLabel lMdp1;
    private javax.swing.JLabel lMdp2;
    private javax.swing.JLabel lNom;
    private javax.swing.JLabel lPermis;
    private javax.swing.JLabel lSituation;
    private javax.swing.JLabel lTel;
    private javax.swing.JPasswordField pfMdp1;
    private javax.swing.JPasswordField pfMdp2;
    private javax.swing.JRadioButton rbConducteur;
    private javax.swing.JRadioButton rbMoto;
    private javax.swing.JRadioButton rbPassager;
    private javax.swing.JRadioButton rbPermisB;
    private javax.swing.JFormattedTextField tfCarteGrise;
    private javax.swing.JTextField tfMail;
    private javax.swing.JTextField tfNom;
    private javax.swing.JFormattedTextField tfTel;
    // End of variables declaration//GEN-END:variables
}
