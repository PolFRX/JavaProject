package PFiches;

import java.io.BufferedReader; //pour lire un fichier
import java.io.FileNotFoundException; //pour gérer les erreurs de fichier inexistant
import java.io.FileReader; //pour lire un fichier
import java.io.IOException; //pour gérer les erreurs de fichier
import java.time.Instant; //Pour modifier les Date en LocalDateTime
import java.time.LocalDateTime; //Pour gérer les dates
import java.time.ZoneId; //Pour modifier les Date en LocalDateTime
import java.util.Date; //Pour modifier les Date en LocalDateTime
import java.util.Iterator; //pour parcourir les linked list
import java.util.LinkedList; //pour utiliser des linked list
import javax.swing.DefaultListModel; //Pour afficher une liste d'éléments dans une JList
import javax.swing.JOptionPane; //Pour afficher des messages
import projetvtc.Conducteur; //Pour gérer des conducteurs
import projetvtc.Disponibilite; //Pour gérer des disponibilités

public class FDispo extends javax.swing.JDialog {

    private final static String fichierLieux = "Lieux.txt"; //Constante qui définit le nom du fichier contenant les lieux
    private Conducteur Conducteur; //Variable pour stocker les infos du conducteur qui utilise la page
    private LinkedList<Disponibilite> listeDisponibilite = new LinkedList<>(); //Liste dans laquelle on va stocker les disponibilités du conducteur
    
    public FDispo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            chargerLieux(); //On appelle la fonction pour charger les lieux tout en gérant les erreurs possibles
        } catch (FileNotFoundException ex) { //Si le fichier n'est pas trouvé
            JOptionPane.showMessageDialog(this, "Le fichier des lieux n'a pas été trouvé.");
        } catch (IOException ex) { //S'il y a une erreur dans la lecture du fichier
            JOptionPane.showMessageDialog(this, "Le fichier des lieux n'a pas pu être lu.");
        }
    }

    public void initCond(Conducteur C) { //pour récupérer le conducteur qui utilise la page
        Conducteur = (Conducteur) C;
        chargerDispo(); //on appelle la fonction qui va charger les disponibilités du conducteur
    }

    private void chargerLieux() throws FileNotFoundException, IOException { //Pour charger les lieux dans les combo box
        String lieu, ligne; //variables pour stocker provisoirement chaque éléments du fichier
        int nbre;
        FileReader fich; //Sert à ouvrir le fichier à lire
        BufferedReader br; //Pour récuperer les lignes du fichier
        fich = new FileReader(fichierLieux); //On ouvre en mode lecture le fichier qui contient les lieux
        br = new BufferedReader(fich); //On créé un BufferedReader qui servira à parcourir le fichier
        ligne = br.readLine(); //On lit la 1ère ligne
        nbre = Integer.valueOf(ligne); //On convertit la ligne en int
        for (int i = 0; i < nbre; i++) { //On continue jusqu'à ce qu'on est chargé le nombre de lieux indiqué
            lieu = br.readLine(); //On récupère un lieu
            jLieu.addItem(lieu); //On l'ajoute à la combo box
        }
    }

    private void chargerDispo() { //Pour récupérer la liste de disponibilités du conducteur et l'afficher
        listeDisponibilite = Conducteur.getDispo(); //On récupère la liste
        DefaultListModel dlm = new DefaultListModel(); //On créé une nouvelle liste de model qui sera celle de la jList des disponibilités
        Iterator<Disponibilite> itDispo = listeDisponibilite.iterator(); //pour parcourir la liste
        while (itDispo.hasNext()) { //Tant que la liste n'est pas finie
            dlm.addElement((itDispo.next()).getPosition()); //On ajoute chaque position de chaque disponibilités à la liste de models
        }
        lDispo.setModel(dlm); //On attribut la liste de models à la JList
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lTexte = new javax.swing.JLabel();
        bAjouterDispo = new javax.swing.JButton();
        bRetour = new javax.swing.JButton();
        jLieu = new javax.swing.JComboBox<>();
        lLieu = new javax.swing.JLabel();
        lDebutDispo = new javax.swing.JLabel();
        lFinDispo = new javax.swing.JLabel();
        dDebutDispo = new javax.swing.JSpinner();
        jScrollPane4 = new javax.swing.JScrollPane();
        lDispo = new javax.swing.JList<>();
        bSupprimer = new javax.swing.JButton();
        dFinDispo = new javax.swing.JSpinner();
        jScrollPane5 = new javax.swing.JScrollPane();
        tDispo = new javax.swing.JTextArea();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lTexte.setText("Disponibilités");

        bAjouterDispo.setText("Ajouter une disponibilité");
        bAjouterDispo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAjouterDispoActionPerformed(evt);
            }
        });

        bRetour.setText("Retour");
        bRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRetourActionPerformed(evt);
            }
        });

        jLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLieuActionPerformed(evt);
            }
        });

        lLieu.setText("Lieu de départ:");

        lDebutDispo.setText("Début de disponibilité:");

        lFinDispo.setText("Fin de disponibilité:");

        dDebutDispo.setModel(new javax.swing.SpinnerDateModel());

        lDispo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lDispo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lDispoValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lDispo);

        bSupprimer.setText("Supprimer disponibilité");
        bSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSupprimerActionPerformed(evt);
            }
        });

        dFinDispo.setModel(new javax.swing.SpinnerDateModel());

        tDispo.setColumns(20);
        tDispo.setRows(5);
        jScrollPane5.setViewportView(tDispo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lLieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(177, 177, 177))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(bAjouterDispo))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bRetour)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(jLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(15, 15, 15)
                                    .addComponent(lFinDispo)
                                    .addGap(18, 18, 18)
                                    .addComponent(dFinDispo))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lDebutDispo)
                                    .addGap(18, 18, 18)
                                    .addComponent(dDebutDispo))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(bSupprimer)
                        .addGap(114, 114, 114))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lTexte, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lTexte, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(bSupprimer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lLieu, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDebutDispo)
                    .addComponent(dDebutDispo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFinDispo)
                    .addComponent(dFinDispo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addComponent(bAjouterDispo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(bRetour)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRetourActionPerformed
        this.setVisible(false); //On rend invisible cette page et on affiche la page précédente
        ((Accueil) getParent()).getFicheCond().setVisible(true);
    }//GEN-LAST:event_bRetourActionPerformed

    private void jLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLieuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLieuActionPerformed

    private void lDispoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lDispoValueChanged
        //Quand l'index de la JList change et donc que le conducteur a choisi une disponibilité à afficher
        int i = lDispo.getSelectedIndex(); //On récupère l'index
        String position = ""; //On initialise la position
        LocalDateTime debut = null, fin = null; //De même pour les dates
        if (!lDispo.isSelectionEmpty()) { //Si l'index ne pointe pas vers rien
            position = listeDisponibilite.get(i).getPosition(); //On récupère la position de la disponibilité
            debut = listeDisponibilite.get(i).getJdispo1(); //On récupère la date du début de la disponibilité
            fin = listeDisponibilite.get(i).getJdispo2(); //On récupère la date de fin de la disponibilité
        }
        tDispo.setText("Position de départ: " + position + "\nDate de début: " + debut + "\nDate de fin: " + fin); //On affiche les informations récupérées

    }//GEN-LAST:event_lDispoValueChanged

    private void bSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSupprimerActionPerformed
        int i = lDispo.getSelectedIndex(); //On récupère l'index pour savoir quelle disponibilité le conducteur veut supprimer
        if (lDispo.isSelectionEmpty()) { //Si rien n'est sélectionné
            JOptionPane.showMessageDialog(this, "Aucune disponbilité sélectionnée."); //message signalant au conducteur son erreur
        } else { //S'il y a bien quelque chose de sélectionné
            listeDisponibilite.remove(i); //on enlève la disponibilité de la liste
            chargerDispo(); //On recharge les disponibilités pour enlever de la JList celle supprimée 
            JOptionPane.showMessageDialog(this, "Disponibilité supprimée."); //On confirme par message
        }
    }//GEN-LAST:event_bSupprimerActionPerformed

    private void bAjouterDispoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAjouterDispoActionPerformed
        LocalDateTime debut = null, fin = null; //on initialise toutes les variables qui stockeront les informations
        Date date1, date2;
        String position = null;
        date1 = (Date) dDebutDispo.getValue(); //On récupère les dates de début et de fin de disponibilités
        date2 = (Date) dFinDispo.getValue();
        Instant di1 = date1.toInstant(); //On passe par la classe instant dans le but de convertir les Date en LocalDateTime
        Instant di2 = date2.toInstant();
        debut = LocalDateTime.ofInstant(di1, ZoneId.systemDefault()); //On convertit en LocalDateTime pour pouvoir les utiliser dans le reste de notre code
        fin = LocalDateTime.ofInstant(di2, ZoneId.systemDefault());
        position = (String) jLieu.getSelectedItem(); //On récupère la position indiquée
        if ((fin.isAfter(debut)) && (position != null)) { //Si la date de fin de dispo est bien ultérieure à celle de début et qu'un position a bien été choisi
            Conducteur.ajouterDispo(debut, fin, position); //On ajoute cette disponbilité à la liste du conducteur
            chargerDispo(); //On charge les dispos pour afficher la nouvelle
        } else if (fin.isBefore(debut)) { //Si la date de fin de dispo est avant la date de début
            JOptionPane.showMessageDialog(this, "Erreur.\nVeuillez choisir une date de fin de disponibilité ultérieure à celle de début.");
        } else if (fin.isEqual(debut)) { //Si les deux dates sont les mêmes
            JOptionPane.showMessageDialog(this, "Erreur.\nVeuillez choisir des dates de début et de fin de disponibilité différentes.");
        } else if (position == null) { //Si aucune position n'a été choisi
            JOptionPane.showMessageDialog(this, "Erreur.\nVeuillez choisir un lieu de départ de disponibilité.");
        }
    }//GEN-LAST:event_bAjouterDispoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            (((Accueil) getParent()).getSite()).sauvegarde(); //On sauvegarde toutes les infos en gérant les possibles erreurs
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur inconnue de sauvegarde.");
        } finally {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FDispo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FDispo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FDispo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FDispo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FDispo dialog = new FDispo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAjouterDispo;
    private javax.swing.JButton bRetour;
    private javax.swing.JButton bSupprimer;
    private javax.swing.JSpinner dDebutDispo;
    private javax.swing.JSpinner dFinDispo;
    private javax.swing.JComboBox<String> jLieu;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lDebutDispo;
    private javax.swing.JList<String> lDispo;
    private javax.swing.JLabel lFinDispo;
    private javax.swing.JLabel lLieu;
    private javax.swing.JLabel lTexte;
    private javax.swing.JTextArea tDispo;
    // End of variables declaration//GEN-END:variables

}
