package PFiches;

import java.io.BufferedReader; //Pour lire les fichiers
import java.io.FileNotFoundException; //Si le fichier n'est pas trouvé
import java.io.FileReader; //Pour lire les fichiers
import java.io.IOException; //Pour s'il y a un problème dans les fichiers
import java.time.Instant; //Pour modifier les Date en LocalDateTime
import java.time.LocalDateTime; //Pour gérer les dates
import java.time.ZoneId; //Pour modifier les Date en LocalDateTime
import java.util.Date; //Pour modifier les Date en LocalDateTime
import javax.swing.JOptionPane; //Pour afficher des messages
import projetvtc.Commande; //Pour gérer les commandes
import projetvtc.Conducteur; //Pour gérer les conducteurs
import projetvtc.ExErreur; //Pour gérer les erreurs de différents types
import projetvtc.ExVide;
import projetvtc.MotoEco; //Pour gérer les différents types de véhicues
import projetvtc.MotoLuxe; 
import projetvtc.MotoMedium;
import projetvtc.Passager;
import projetvtc.VoitureEco;
import projetvtc.VoitureLuxe;
import projetvtc.VoitureMedium;

public class FCommande extends javax.swing.JDialog {

    private final static String fichierLieux = "Lieux.txt"; //Constante avec le fichier des lieux
    private Passager P; //Variable qui va contenir le passager

    public FCommande(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        lOption.setVisible(false); //On rend invisible les champs spécifiques à un seul type de véhicule
        lPmr.setVisible(false); //On ne les affichera que si le passager choisit ce type de véhicule
        cbPmr.setVisible(false);
        lGrdCoffre.setVisible(false);
        cbGrdCoffre.setVisible(false);
        try {
            chargerLieux(); //On charge les lieux
        } catch (FileNotFoundException ex) { //Si le fichier n'est pas trouvé
            JOptionPane.showMessageDialog(this, "Le fichier des lieux n'a pas été trouvé.");
        } catch (IOException ex) { //S'il y a un problème dans la lecture de fichier
            JOptionPane.showMessageDialog(this, "Le fichier des lieux n'a pas pu être lu.");
        }
    }

    public void initPass(Passager P) { //On initialise le passager
        this.P = P;
    }

    private void chargerLieux() throws FileNotFoundException, IOException { //pour afficher les lieux
        String lieu, ligne;
        int nbre = 0;
        FileReader fich; //Sert à ouvrir le fichier à lire
        BufferedReader br; //Pour récuperer les lignes du fichier
        fich = new FileReader(fichierLieux); //On ouvre en mode lecture le fichier qui contient les lieux
        br = new BufferedReader(fich); //On créé un BufferedReader qui servira à parcourir le fichier
        ligne = br.readLine();
        nbre = Integer.valueOf(ligne);
        for (int i = 0; i < nbre; i++) {
            lieu = br.readLine(); //On lit dans le fichier un lieu
            cbLieuArrive.addItem(lieu); //On ajoute ce lieu aux deux combo box
            cbLieuDepart.addItem(lieu);
        }
        cbLieuDepart.setSelectedIndex(-1); //on initialise l'index des combo box pour que rien ne soit sélectionné
        cbLieuArrive.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bRetour = new javax.swing.JButton();
        cbLieuDepart = new javax.swing.JComboBox<>();
        lLieuDepart = new javax.swing.JLabel();
        sDate = new javax.swing.JSpinner();
        lDate = new javax.swing.JLabel();
        lMessage = new javax.swing.JLabel();
        lLieuArrive = new javax.swing.JLabel();
        cbLieuArrive = new javax.swing.JComboBox<>();
        lVehic = new javax.swing.JLabel();
        cbVehic = new javax.swing.JComboBox<>();
        cbPmr = new javax.swing.JCheckBox();
        cbGrdCoffre = new javax.swing.JCheckBox();
        lPmr = new javax.swing.JLabel();
        lGrdCoffre = new javax.swing.JLabel();
        lOption = new javax.swing.JLabel();
        bCommander = new javax.swing.JButton();
        cbPlace = new javax.swing.JComboBox<>();
        lPlace = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        bRetour.setText("Retour");
        bRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRetourActionPerformed(evt);
            }
        });

        lLieuDepart.setText("Lieu de départ:");

        sDate.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.DAY_OF_WEEK));

        lDate.setText("Date et heure:");

        lMessage.setText("Votre espace de commande");

        lLieuArrive.setText("Lieu d'arrivée:");

        lVehic.setText("Type de véhicule:");

        cbVehic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Voiture Economique", "Voiture Medium", "Voiture Luxe", "Moto Economique", "Moto Medium", "Moto Luxe" }));
        cbVehic.setSelectedIndex(-1);
        cbVehic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVehicActionPerformed(evt);
            }
        });

        cbPmr.setText("Oui");

        cbGrdCoffre.setText("Oui");

        lPmr.setText("Personne à mobilité réduite:");

        lGrdCoffre.setText("Grand coffre:");

        lOption.setText("Options");

        bCommander.setText("Commander");
        bCommander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommanderActionPerformed(evt);
            }
        });

        lPlace.setText("Nombre de places:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bCommander, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(bRetour))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lPmr)
                            .addComponent(lGrdCoffre)
                            .addComponent(lVehic)
                            .addComponent(lDate)
                            .addComponent(lLieuArrive)
                            .addComponent(lLieuDepart)
                            .addComponent(lPlace))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbGrdCoffre)
                                    .addComponent(cbPmr)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbPlace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbVehic, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 46, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cbLieuDepart, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbLieuArrive, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sDate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(lOption)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lMessage)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lLieuDepart)
                    .addComponent(cbLieuDepart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lLieuArrive)
                    .addComponent(cbLieuArrive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lVehic)
                    .addComponent(cbVehic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lPlace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(lOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPmr)
                    .addComponent(cbGrdCoffre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lGrdCoffre)
                    .addComponent(cbPmr))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(bRetour))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(bCommander)))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            (((Accueil) getParent()).getSite()).sauvegarde(); //On sauvegarde en gérant les possibles erreurs
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur inconnue de sauvegarde.");
        } finally {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    private void cbVehicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVehicActionPerformed
        int choix = cbVehic.getSelectedIndex(); //On regarde l'index pour voir quel type de véhicule a été choisi
        if (choix < 3 && choix > -1) { //Si le choix est une voiture
            cbPlace.removeAllItems(); //On enleve tous les items de la combo box
            cbPlace.addItem("1"); //On ajoute tous les choix possible pour une voiture
            cbPlace.addItem("3");
            cbPlace.addItem("4");
            cbPlace.addItem("6");
            lOption.setVisible(true); //On rend visible les options spécifiques à une voiture
            lPmr.setVisible(true);
            cbPmr.setVisible(true);
            lGrdCoffre.setVisible(true);
            cbGrdCoffre.setVisible(true);
        } else if (choix > 2) { //Si c'est une moto
            cbPlace.removeAllItems(); //On enlève tous les items de la combo box
            cbPlace.addItem("1"); //On ajoute le nombre d eplace possible pour une moto
            lOption.setVisible(false); //On rend invisible les options spécifiques à la voiture
            lPmr.setVisible(false);
            cbPmr.setVisible(false);
            lGrdCoffre.setVisible(false);
            cbGrdCoffre.setVisible(false);
        }
    }//GEN-LAST:event_cbVehicActionPerformed

    private void bRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRetourActionPerformed
        this.setVisible(false);
        ((Accueil) getParent()).getFicheP().setVisible(true);
    }//GEN-LAST:event_bRetourActionPerformed

    private void bCommanderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCommanderActionPerformed
        try {
            if (cbLieuDepart.getSelectedIndex() == -1 || cbLieuArrive.getSelectedIndex() == -1 || cbVehic.getSelectedIndex() == -1 || cbPlace.getSelectedIndex() == -1) {
                throw new ExVide("Veuillez remplir tous les champs."); //Si un champ est vide on propage l'erreur ExVide
            } else if (cbLieuDepart.getSelectedIndex() == cbLieuArrive.getSelectedIndex()) {
                throw new ExVide("Il faut des lieux de départ et d'arrivée différents."); //Si le lieu de départ et d'arrivé sont les mêmes on propage ExVide
            }
            Conducteur C; //Pour stocker le conducteur
            String nomC = ""; //Pour stocker le nom du conducteur qu'on initialise vide
            int nbrePlaces = Integer.valueOf(String.valueOf(cbPlace.getSelectedItem())); //On récupère le nombre de place choisi et on le convertit en int
            int choix = cbVehic.getSelectedIndex(); //On récupère l'index du type de véhicule
            String lieuDepart, lieuArrive; //Pour stocker les lieux
            boolean grdCoffre, pmr; //Pour savoir s'il y a un grand coffre et une prise en charge des personnes à mobilité réduite
            Date date; //Pour stocker la date sous le format Date (qu'on changera car non compatible avec le format utilisé)
            LocalDateTime dateCom; //Pour stocker la date sous le format voulu
            date = (Date) sDate.getValue(); //On récupère la date sous le format Date
            Instant di1 = date.toInstant(); //On passe par la classe Instant
            dateCom = LocalDateTime.ofInstant(di1, ZoneId.systemDefault()); //On convertit la date sous le format Instant en LocalDateTime
            grdCoffre = cbGrdCoffre.isSelected(); //On regarde si le passager veut un grand coffre
            pmr = cbPmr.isSelected(); // De même avec la prise en charge de personne à mobilité réduite
            lieuDepart = String.valueOf(cbLieuDepart.getSelectedItem()); //On récupère les lieux
            lieuArrive = String.valueOf(cbLieuArrive.getSelectedItem());
            switch (choix) { //Pour créer un conducteur avec le bon type de véhicule
                case 0: //Voiture Eco
                    VoitureEco VEco = new VoitureEco(grdCoffre, pmr, 70, nbrePlaces); 
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, VEco);
                    break;
                case 1: //Voiture Medium
                    VoitureMedium VMed = new VoitureMedium(grdCoffre, pmr, 80, nbrePlaces);
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, VMed);
                    break;
                case 2: //Voiture Luxe
                    VoitureLuxe VLux = new VoitureLuxe(grdCoffre, pmr, 90, nbrePlaces);
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, VLux);
                    break;
                case 3: //Moto Eco
                    MotoEco MEco = new MotoEco(90, nbrePlaces);
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, MEco);
                    break;
                case 4: //Moto Medium
                    MotoMedium MMed = new MotoMedium(100, nbrePlaces);
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, MMed);
                    break;
                case 5: //Moto Luxe
                    MotoLuxe MLux = new MotoLuxe(110, nbrePlaces);
                    C = (((Accueil) getParent()).getSite()).passerCommande(P, lieuDepart, lieuArrive, pmr, grdCoffre, dateCom, MLux);
                    break;
                default: //Si l'index n'est pas bon
                    throw new ExErreur("Erreur d'index dans le switch.");
            }
            nomC = C.getNom(); //on récupère le nom du conducteur
            JOptionPane.showMessageDialog(this, "Vous avez bien passé commande.\nVotre conducteur est " + nomC + ".\nMoyenne: " + C.getMoyenne());
            Commande Com = P.getLastCommande(); //On récupère la dernière commande
            double temps = Com.calculerTemps(); //On calcule le temps du trajet
            double cout = Com.calculerCout(); ////On calcule le cout du trajet
            JOptionPane.showMessageDialog(this, "Vous avez mis " + temps + "minutes, et vous avez payé " + cout + "€.\nPour donner un avis sur votre conducteur rendez-vous dans votre espace anciennes commandes.");
            (((Accueil) getParent()).getFicheP()).setVisible(true); //On affiche la fiche de l'espace passager
            this.setVisible(false); //On rend invisible cette fiche
            cbLieuDepart.setSelectedIndex(-1); //On réinitialise les index des combo box
            cbLieuArrive.setSelectedIndex(-1);
            cbVehic.setSelectedIndex(-1);
            (((Accueil) getParent()).getFicheEspaceCommande()).chargerCommande(); //On charge les commandes dans l'espace commande pour afficher la nouvelle commande
        } catch (ExVide | ExErreur ex) { //Dans le cas d'une erreur
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_bCommanderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FCommande.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FCommande.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FCommande.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FCommande.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FCommande dialog = new FCommande(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCommander;
    private javax.swing.JButton bRetour;
    private javax.swing.JCheckBox cbGrdCoffre;
    private javax.swing.JComboBox<String> cbLieuArrive;
    private javax.swing.JComboBox<String> cbLieuDepart;
    private javax.swing.JComboBox<String> cbPlace;
    private javax.swing.JCheckBox cbPmr;
    private javax.swing.JComboBox<String> cbVehic;
    private javax.swing.JLabel lDate;
    private javax.swing.JLabel lGrdCoffre;
    private javax.swing.JLabel lLieuArrive;
    private javax.swing.JLabel lLieuDepart;
    private javax.swing.JLabel lMessage;
    private javax.swing.JLabel lOption;
    private javax.swing.JLabel lPlace;
    private javax.swing.JLabel lPmr;
    private javax.swing.JLabel lVehic;
    private javax.swing.JSpinner sDate;
    // End of variables declaration//GEN-END:variables
}
